<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Encrypted P2P Chat</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      background: #181c24;
      color: #f3f3f3;
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .container {
      background: #23283a;
      border-radius: 12px;
      box-shadow: 0 4px 24px #0008;
      margin-top: 40px;
      padding: 32px 24px 24px 24px;
      width: 100%;
      max-width: 420px;
      display: flex;
      flex-direction: column;
      gap: 18px;
    }
    h2 {
      text-align: center;
      margin-bottom: 8px;
      color: #7ecfff;
      letter-spacing: 1px;
    }
    #chat {
      background: #181c24;
      border: 1px solid #2c3142;
      border-radius: 8px;
      min-height: 180px;
      max-height: 220px;
      overflow-y: auto;
      padding: 12px;
      font-size: 1rem;
      margin-bottom: 0.5em;
    }
    .msg {
      margin-bottom: 8px;
      line-height: 1.5;
    }
    .msg.me {
      text-align: right;
      color: #7ecfff;
    }
    .msg.peer {
      text-align: left;
      color: #f3f3f3;
    }
    .msg.system {
      text-align: center;
      color: #b0b0b0;
      font-style: italic;
    }
    .row {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    input[type="password"], input[type="text"] {
      flex: 1;
      padding: 8px 10px;
      border-radius: 6px;
      border: 1px solid #2c3142;
      background: #23283a;
      color: #f3f3f3;
      font-size: 1rem;
      outline: none;
      transition: border 0.2s;
    }
    input[type="password"]:focus, input[type="text"]:focus {
      border: 1.5px solid #7ecfff;
    }
    button {
      background: linear-gradient(90deg, #7ecfff 0%, #4e8cff 100%);
      color: #181c24;
      border: none;
      border-radius: 6px;
      padding: 8px 18px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s, color 0.2s;
    }
    button:active {
      background: #4e8cff;
      color: #fff;
    }
    #status {
      color: #7ecfff;
      font-size: 0.98em;
      min-height: 1.2em;
    }
    #error {
      color: #ff6b6b;
      font-size: 0.98em;
      min-height: 1.2em;
    }
    @media (max-width: 500px) {
      .container {
        padding: 12px 4px 16px 4px;
        max-width: 98vw;
      }
      #chat {
        font-size: 0.95rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>ðŸ”’ Encrypted P2P Chat</h2>
    <div class="row">
      <input type="password" id="password" placeholder="Encryption password" autocomplete="off" />
      <button id="setPassword">Set Key</button>
    </div>
    <div class="row" style="justify-content: center;">
      <button id="hostBtn">Host</button>
      <button id="joinBtn">Join</button>
    </div>
    <div id="status"></div>
    <div id="error"></div>
    <div id="chat"></div>
    <div class="row">
      <input type="text" id="message" placeholder="Type a message..." autocomplete="off" />
      <button id="sendBtn">Send</button>
    </div>
  </div>
  <script>
    // UUIDs for demo (must match on both peers)
    const SERVICE_UUID = '0000aaaa-0000-1000-8000-00805f9b34fb';
    const CHAR_UUID = '0000aaab-0000-1000-8000-00805f9b34fb';

    let aesKey = null;
    let gattServer = null;
    let chatCharacteristic = null;
    let isHost = false;

    function log(msg, who = "system") {
      const chat = document.getElementById('chat');
      const div = document.createElement('div');
      div.className = "msg " + who;
      div.innerHTML = msg;
      chat.appendChild(div);
      chat.scrollTop = chat.scrollHeight;
    }
    function setStatus(msg) {
      document.getElementById('status').textContent = msg;
    }
    function setError(msg) {
      document.getElementById('error').textContent = msg;
    }

    async function deriveKey(password) {
      const enc = new TextEncoder();
      const keyMaterial = await window.crypto.subtle.importKey(
        "raw", enc.encode(password), {name: "PBKDF2"}, false, ["deriveKey"]
      );
      return window.crypto.subtle.deriveKey(
        {
          name: "PBKDF2",
          salt: enc.encode("bluetooth-chat-salt"),
          iterations: 100000,
          hash: "SHA-256"
        },
        keyMaterial,
        { name: "AES-GCM", length: 256 },
        false,
        ["encrypt", "decrypt"]
      );
    }

    document.getElementById('setPassword').onclick = async () => {
      const pwd = document.getElementById('password').value;
      if (!pwd) return setError("Password required");
      aesKey = await deriveKey(pwd);
      setStatus("Encryption key set.");
      setError("");
    };

    async function encryptMessage(msg) {
      const enc = new TextEncoder();
      const iv = window.crypto.getRandomValues(new Uint8Array(12));
      const ciphertext = await window.crypto.subtle.encrypt(
        { name: "AES-GCM", iv },
        aesKey,
        enc.encode(msg)
      );
      // Prepend IV to ciphertext
      return new Uint8Array([...iv, ...new Uint8Array(ciphertext)]);
    }

    async function decryptMessage(data) {
      const iv = data.slice(0, 12);
      const ciphertext = data.slice(12);
      try {
        const plaintext = await window.crypto.subtle.decrypt(
          { name: "AES-GCM", iv },
          aesKey,
          ciphertext
        );
        return new TextDecoder().decode(plaintext);
      } catch (e) {
        return "[Decryption failed]";
      }
    }

    // Host (GATT Server) logic (simulated, see comments)
    document.getElementById('hostBtn').onclick = async () => {
      if (!aesKey) return setError("Set password first!");
      isHost = true;
      setStatus("Starting GATT server...");
      try {
        // Web Bluetooth API cannot truly advertise as a server in browser.
        // This is a placeholder for demo purposes.
        setStatus("Advertising as host. (Browser cannot truly advertise, demo only)");
        log("<i>Waiting for client to connect... (This is a demo, real P2P not possible in browser)</i>", "system");
      } catch (e) {
        setError("Failed to start host: " + e);
      }
    };

    // Join (GATT Client) logic
    document.getElementById('joinBtn').onclick = async () => {
      if (!aesKey) return setError("Set password first!");
      isHost = false;
      setStatus("Connecting to host...");
      try {
        const device = await navigator.bluetooth.requestDevice({
          filters: [{ services: [SERVICE_UUID] }]
        });
        gattServer = await device.gatt.connect();
        const service = await gattServer.getPrimaryService(SERVICE_UUID);
        chatCharacteristic = await service.getCharacteristic(CHAR_UUID);

        // Listen for notifications
        await chatCharacteristic.startNotifications();
        chatCharacteristic.addEventListener('characteristicvaluechanged', async (event) => {
          const value = event.target.value;
          const arr = new Uint8Array(value.buffer);
          const msg = await decryptMessage(arr);
          log(`<b>Peer:</b> ${msg}`, "peer");
        });

        setStatus("Connected to host!");
        setError("");
      } catch (e) {
        setError("Failed to connect: " + e);
      }
    };

    // Send message
    document.getElementById('sendBtn').onclick = async () => {
      const msg = document.getElementById('message').value;
      if (!msg) return;
      if (!aesKey) return setError("Set password first!");
      if (!chatCharacteristic) return setError("Not connected to peer!");

      const encrypted = await encryptMessage(msg);
      try {
        await chatCharacteristic.writeValue(encrypted);
        log(`<b>You:</b> ${msg}`, "me");
        document.getElementById('message').value = '';
      } catch (e) {
        setError("Failed to send: " + e);
      }
    };

    // Enter key to send
    document.getElementById('message').addEventListener('keydown', function(e) {
      if (e.key === "Enter") {
        document.getElementById('sendBtn').click();
      }
    });
  </script>
</body>
</html>
